{"ast":null,"code":"import { saveAs } from \"file-saver\";\nexport const exportToCSV = (expenses, filename = \"expenses.csv\") => {\n  // Create CSV header\n  const header = [\"Date\", \"Description\", \"Category\", \"Amount\"];\n\n  // Convert expenses to CSV rows\n  const rows = expenses.map(expense => [new Date(expense.date).toLocaleDateString(), expense.description, expense.category, expense.amount.toFixed(2)]);\n\n  // Combine header and rows\n  const csvContent = [header, ...rows].map(row => row.map(field => `\"${field}\"`).join(\",\")).join(\"\\n\");\n\n  // Create and download file\n  const blob = new Blob([csvContent], {\n    type: \"text/csv;charset=utf-8;\"\n  });\n  saveAs(blob, filename);\n};\nexport const exportToJSON = (expenses, filename = \"expenses.json\") => {\n  const dataStr = JSON.stringify(expenses, null, 2);\n  const blob = new Blob([dataStr], {\n    type: \"application/json\"\n  });\n  saveAs(blob, filename);\n};\nexport const generateExpenseReport = expenses => {\n  const total = expenses.reduce((sum, exp) => sum + exp.amount, 0);\n  const categoryTotals = expenses.reduce((acc, expense) => {\n    acc[expense.category] = (acc[expense.category] || 0) + expense.amount;\n    return acc;\n  }, {});\n  const report = {\n    generatedAt: new Date().toISOString(),\n    totalExpenses: total,\n    expenseCount: expenses.length,\n    averageExpense: expenses.length > 0 ? total / expenses.length : 0,\n    categoryBreakdown: categoryTotals,\n    expenses: expenses\n  };\n  return report;\n};","map":{"version":3,"names":["saveAs","exportToCSV","expenses","filename","header","rows","map","expense","Date","date","toLocaleDateString","description","category","amount","toFixed","csvContent","row","field","join","blob","Blob","type","exportToJSON","dataStr","JSON","stringify","generateExpenseReport","total","reduce","sum","exp","categoryTotals","acc","report","generatedAt","toISOString","totalExpenses","expenseCount","length","averageExpense","categoryBreakdown"],"sources":["/Users/pragneshpatel/Documents/GVP/Hackthon/expense-tracker/client/src/utils/exportUtils.js"],"sourcesContent":["import { saveAs } from \"file-saver\";\n\nexport const exportToCSV = (expenses, filename = \"expenses.csv\") => {\n  // Create CSV header\n  const header = [\"Date\", \"Description\", \"Category\", \"Amount\"];\n\n  // Convert expenses to CSV rows\n  const rows = expenses.map((expense) => [\n    new Date(expense.date).toLocaleDateString(),\n    expense.description,\n    expense.category,\n    expense.amount.toFixed(2),\n  ]);\n\n  // Combine header and rows\n  const csvContent = [header, ...rows]\n    .map((row) => row.map((field) => `\"${field}\"`).join(\",\"))\n    .join(\"\\n\");\n\n  // Create and download file\n  const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n  saveAs(blob, filename);\n};\n\nexport const exportToJSON = (expenses, filename = \"expenses.json\") => {\n  const dataStr = JSON.stringify(expenses, null, 2);\n  const blob = new Blob([dataStr], { type: \"application/json\" });\n  saveAs(blob, filename);\n};\n\nexport const generateExpenseReport = (expenses) => {\n  const total = expenses.reduce((sum, exp) => sum + exp.amount, 0);\n\n  const categoryTotals = expenses.reduce((acc, expense) => {\n    acc[expense.category] = (acc[expense.category] || 0) + expense.amount;\n    return acc;\n  }, {});\n\n  const report = {\n    generatedAt: new Date().toISOString(),\n    totalExpenses: total,\n    expenseCount: expenses.length,\n    averageExpense: expenses.length > 0 ? total / expenses.length : 0,\n    categoryBreakdown: categoryTotals,\n    expenses: expenses,\n  };\n\n  return report;\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,YAAY;AAEnC,OAAO,MAAMC,WAAW,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,GAAG,cAAc,KAAK;EAClE;EACA,MAAMC,MAAM,GAAG,CAAC,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,CAAC;;EAE5D;EACA,MAAMC,IAAI,GAAGH,QAAQ,CAACI,GAAG,CAAEC,OAAO,IAAK,CACrC,IAAIC,IAAI,CAACD,OAAO,CAACE,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC,EAC3CH,OAAO,CAACI,WAAW,EACnBJ,OAAO,CAACK,QAAQ,EAChBL,OAAO,CAACM,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,CAC1B,CAAC;;EAEF;EACA,MAAMC,UAAU,GAAG,CAACX,MAAM,EAAE,GAAGC,IAAI,CAAC,CACjCC,GAAG,CAAEU,GAAG,IAAKA,GAAG,CAACV,GAAG,CAAEW,KAAK,IAAK,IAAIA,KAAK,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CACxDA,IAAI,CAAC,IAAI,CAAC;;EAEb;EACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,UAAU,CAAC,EAAE;IAAEM,IAAI,EAAE;EAA0B,CAAC,CAAC;EACxErB,MAAM,CAACmB,IAAI,EAAEhB,QAAQ,CAAC;AACxB,CAAC;AAED,OAAO,MAAMmB,YAAY,GAAGA,CAACpB,QAAQ,EAAEC,QAAQ,GAAG,eAAe,KAAK;EACpE,MAAMoB,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACvB,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;EACjD,MAAMiB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACG,OAAO,CAAC,EAAE;IAAEF,IAAI,EAAE;EAAmB,CAAC,CAAC;EAC9DrB,MAAM,CAACmB,IAAI,EAAEhB,QAAQ,CAAC;AACxB,CAAC;AAED,OAAO,MAAMuB,qBAAqB,GAAIxB,QAAQ,IAAK;EACjD,MAAMyB,KAAK,GAAGzB,QAAQ,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACjB,MAAM,EAAE,CAAC,CAAC;EAEhE,MAAMkB,cAAc,GAAG7B,QAAQ,CAAC0B,MAAM,CAAC,CAACI,GAAG,EAAEzB,OAAO,KAAK;IACvDyB,GAAG,CAACzB,OAAO,CAACK,QAAQ,CAAC,GAAG,CAACoB,GAAG,CAACzB,OAAO,CAACK,QAAQ,CAAC,IAAI,CAAC,IAAIL,OAAO,CAACM,MAAM;IACrE,OAAOmB,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,MAAMC,MAAM,GAAG;IACbC,WAAW,EAAE,IAAI1B,IAAI,CAAC,CAAC,CAAC2B,WAAW,CAAC,CAAC;IACrCC,aAAa,EAAET,KAAK;IACpBU,YAAY,EAAEnC,QAAQ,CAACoC,MAAM;IAC7BC,cAAc,EAAErC,QAAQ,CAACoC,MAAM,GAAG,CAAC,GAAGX,KAAK,GAAGzB,QAAQ,CAACoC,MAAM,GAAG,CAAC;IACjEE,iBAAiB,EAAET,cAAc;IACjC7B,QAAQ,EAAEA;EACZ,CAAC;EAED,OAAO+B,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}